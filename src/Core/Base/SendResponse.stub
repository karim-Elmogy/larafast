<?php

namespace Core\Base\Traits\Response;

trait SendResponse
{
    /**
     * send the response
     *
     * @param array $result
     * @param string $message
     * @param bool $is_success
     * @param int $status_code
     * @return \Illuminate\Http\JsonResponse
     */


     /**
      * To Use This apiResponse function
      * call namespace -- use App\Http\Traits\ApiResponseTrait; --
      * call -- use ApiResponseTrait; --

      * One Object
      * return $this->sendResponse(new Resource(Model::find($id)));

      * All Objects
      * return $this->sendResponse(Resource::collection(Model::latest()->paginate($request->per_page ?? 10)->items()), customModel:Model::get()->count());
     */




     public function sendResponse($result = [], $message = 'Success.', $is_success = true, $status_code = 200, $customModel = false)
        {

            $result_key = $is_success ? 'data' : 'errors';

            $response = [
                "endpointName" => app('request')->route()->uri(),
                "is_success" => $is_success,
                "status_code" => $status_code,
                "message" => $message,
                "current_page" => request()->page ? (int)request()->page : 1,
                "total" => $customModel > 0 ? $customModel : (isset($this->model) ? $this->model->count() : 0),
                "per_page" => request()->per_page ? (int) request()->per_page : 10,
                "pages" => 0,

                $result_key => $result,
            ];

            $response["pages"] = ceil($response["total"] / $response["per_page"]);

            // for paginated data
            if (isset($result['data']) && isset($result['links']) && isset($result['meta'])) {
                $response['data'] = $result['data'];
                $response['links'] = $result['links'];
                $response['meta'] = $result['meta'];
            }

            return response()->json($response, $status_code);
        }


    /**
     * send the exception response
     *
     * @param \Exception $e
     * @param bool $report
     * @return \Illuminate\Http\JsonResponse
     */
    protected function sendExceptionResponse($e, $report = true)
    {
        $errors  = [];
        $message = 'OOPS! there is a problem in our side! we got your problem and we will fix that very soon.';

        if ($report) {
            report($e);
        }

        if (env('APP_DEBUG') == true) {
            $errors  = $e->getTrace();
            $message = $e->getMessage();
        }

        return $this->sendResponse($errors, $message, false, 500);
    }
}
